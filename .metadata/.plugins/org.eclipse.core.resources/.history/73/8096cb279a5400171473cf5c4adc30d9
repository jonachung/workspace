
public class IntArrays {

	private int[] values;
	
	private int currentSize;
	
	public IntArrays(int[] array, int size) // if statement for boundaries of size: size can't be negative or greater than values.length. set currentSize to values.length.
	{
		if ((size > 0 && size <= array.length) && array != null)
		{
			values = array; // check if array is null if it is null then create default array [IntArray()]. Print out error message.
			currentSize = size;
		} else if (array != null)
		{
			values = new int[10];
			currentSize = array.length;
			System.out.println("ERROR");
		} else if (size < 0 || size > array.length)
		{
			values = array;
			currentSize = array.length;
			System.out.println("ERROR");
		}
	}
	
	public IntArrays()
	{
		this(10);
	}
	
	public IntArrays(int capacity)
	{
		if (capacity > 0)
		{
			values = new int[capacity]; // capacity could not be negative. if is then create default array [IntArray()]. Print out error message
		} else
		{
			values = new int[10];
			System.out.println("ERROR");
		}
		currentSize = 0;
	}
	
	public int min()
	{
		if (currentSize > 0)
		{
			int minIndex = 0;
			for (int index = 1; index < currentSize; index++)
			{
				if (values[index] < values[minIndex])
				{
					minIndex = index;
				}
			}
			return values[minIndex];
		}
		return -1;
	}	
	
	public int max() // fix like min method
	{	
		if (currentSize > 0)
		{
			int maxIndex = 0;
			for (int index = 1; index < currentSize; index++)
			{
				if (values[index] > values[maxIndex])
				{
					maxIndex = index;
				}
			}
			return values[maxIndex];
		}
		return -1;
	}
	
	public int sum()
	{
		int total = 0;
		for (int index = 0; index < currentSize; index++)
		{
			total += values[index];
		}
		return total;
	}
	
	public double average() 
	{
		if (currentSize > 0)
		{
			double average;
			average = this.sum() / (double) currentSize;
			return average;
		}
		return -1;
	}
	
	
	public boolean contains(int number)
	{
		return (this.indexOf(number) != -1);
	}
	
	public int count(int number)
	{
		int numberOfTimes = 0;
		for (int index = 0; index < currentSize; index++)
		{
			if (values[index] == number)
			{
				numberOfTimes++;
			}
		}
		return numberOfTimes;
	}
	
	public int indexOf(int number)
	{
		for (int index = 0; index < currentSize; index++)
		{
			if (values[index] == number)
			{
				return index;
			}
		}
		return -1;
	}
	
	public int lastIndexOf(int number)
	{
		for (int index = currentSize - 1; index >= 0; index--)
		{
			if (values[index] == number)
			{
				return index;
			}
		}
		return -1;
	}
	
	public void print()
	{
		for (int index = 0; index < currentSize - 1; index++)
		{
			System.out.print(values[index] + ",");	
		}
		System.out.println(values[currentSize - 1]);
	}
	
	public boolean swap(int index1, int index2) // supposed to check if true and false. and then change values to correct values. should be able to print out correct array.
	{
		if (index1 < currentSize && index2 < currentSize && index1 >= 0 && index2 >= 0 && index1 == index2)
		{
			int temp = values[index1];
			values[index1] = values[index2];
			values[index2] = temp;
			return true;
		}
		return false;	
	}
	
	public int size()
	{
		return currentSize;
	}
	
	public boolean isEmpty()
	{
		return (currentSize == 0);
	}
	
	public void clear()
	{
		currentSize = 0;
	}
	
	public int get(int index)
	{
		if (index >= 0 && index < currentSize)
		{
			return values[index];
		} else
		{
			return -1;
		}
	}
	
	public boolean set(int index, int number)
	{
		if (index >= 0 && index < currentSize)
		{
			values[index] = number;
			return true;
		}
		return false;
	}
	
	public int[] clone()
	{
		int[] newValues = new int[values.length];
		for (int index = 0; index < currentSize; index++)
		{
			newValues[index] = values[index];
		}
		return newValues;
	}
	
	public int[] subList(int fromIndex, int toIndex) // fix subList
	{
		if (fromIndex > 0 && toIndex > 0 && toIndex > fromIndex && fromIndex > values.length && toIndex > values.length)
		{
			int[] newValues = new int[toIndex - fromIndex];
			for (int index = fromIndex; index < toIndex; index++)
			{
				newValues[index - fromIndex] = values[index];
			}
			return newValues;
		} else
		{
			System.out.println("ERROR");
			return values;
		}
	}
	
	public int removeByIndex(int index) // range of index is 0 to currentSize, if isnt return -1.
	{
		if (index >= 0 && index < currentSize)
		{
			int removedNumber = values[index];
			for (int newIndex = index + 1; newIndex < currentSize; newIndex++)
			{
				values[newIndex - 1] = values[newIndex];
			}
			currentSize--;
			return removedNumber;
		} else
		{
			return -1;
		}
	}
	
	public boolean remove(int number)
	{
		if (this.removeByIndex(this.indexOf(number)) != -1)
		{
			return true;
		} 
		return false;
	}
	
	public boolean ensureCapacity(int minCapacity) // check values.length not currentSize
	{
		while (minCapacity > values.length)
		{
			int[] myArray = new int[minCapacity];
			for (int index = 0; index < currentSize; index++)
			{
				myArray[index] = values[index];
			}
			values = myArray;
		}
		return true;
	}
	
	public boolean add(int number) //check for capacity
	{
			if (currentSize >= values.length)
			{
				this.ensureCapacity(2 * values.length + 1);
				//values[currentSize] = number;
				//currentSize++;
				//return true;
			}
			values[currentSize] = number;
			currentSize++;
			return true;
	}
	
	public boolean add(int index, int number) // check index and check for capacity
	{
		if (index >= 0 && index <= values.length)
		{
			if (currentSize >= values.length)
			{
				this.ensureCapacity(currentSize + 1);
			}
			currentSize++;
			for (int newIndex = currentSize - 1; newIndex > index; newIndex--)
			{
				values[newIndex] = values[newIndex - 1];
			}
			values[index] = number;
			return true;
		} else
		{
			return false;
		}
		
	}
	
	public int[] sorted()
	{
		int temp;
		for(int index = 0; index < values.length; index++)
		{
		    for(int newIndex = index + 1; newIndex < values.length; newIndex++)
		    {
		        if(values[index] > values[newIndex])
		        {
		            temp = values[index];
		            values[index] = values[newIndex];
		            values[newIndex] = temp;
		        }
		    }
		}
		return values;
	}
	
	public boolean sort()
	{
		if (this.sorted() != null)
		{
			return true;
		}
		return false;
	}
	
	
}
